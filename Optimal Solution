#include <bits/stdc++.h>
#include <iostream>
#include <vector>
#include <algorithm>
#include <iostream>
#include <fstream>
#include <list>
#include <cmath>
using namespace std;
 
// A utility function that returns
// maximum of two integers
int max(int a, int b)
{
    return (a > b) ? a : b;
}
 
// Returns the maximum value that
// can be put in a knapsack of capacity W
int knapSack(int W, int wt[], int val[], int n)
{
    int i, w;
      vector<vector<int>> K(n + 1, vector<int>(W + 1));
 
    // Build table K[][] in bottom up manner
    for(i = 0; i <= n; i++)
    {
        for(w = 0; w <= W; w++)
        {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] +
                                K[i - 1][w - wt[i - 1]],
                                K[i - 1][w]);
            else
                K[i][w] = K[i - 1][w];
        }
    }
    return K[n][W];
}
 
// Driver Code
int main()
{ ifstream fin;
  int n; //number of pairs
  int M; //max capacity
  int i;

  fin.open("f24.txt");
  fin >> n >> M;
  int p[n];
  int c[n];
  for (i=0; i<n; i++)
  {
    fin >> p[i] >> c[i];
  }
  fin.close();
    cout << knapSack(M, c, p, n);
    return 0;
}
